{
	"name": "Implementing workload groups",
	"properties": {
		"folder": {
			"name": "Chapter 10"
		},
		"content": {
			"query": "// 1 - Creating a new workload group\n\n.create-or-alter workload_group ['Engineering Department WG']  ```\n{\n  \"RequestLimitsPolicy\": {\n    \"MaxResultRecords\": {\n        \"IsRelaxable\": false,\n        \"Value\": 1048576\n    },\n    \"MaxResultBytes\": {\n        \"IsRelaxable\": true,\n        \"Value\": 64000000\n    },\n    \"MaxExecutiontime\": {\n        \"IsRelaxable\": false,\n        \"Value\": \"00:02:30\"\n    }\n  }\n}```\n\n// 2 - Adding a request rate limit policy\n\n.alter-merge workload_group ['Engineering Department WG']  ```\n{\n  \"RequestRateLimitPolicies\": [\n  {\n      \"IsEnabled\": true,\n      \"Scope\": \"WorkloadGroup\",\n      \"LimitKind\": \"ConcurrentRequests\",\n      \"Properties\": {\n        \"MaxConcurrentRequests\": 50\n      }\n    },\n    {\n      \"IsEnabled\": true,\n      \"Scope\": \"Principal\",\n      \"LimitKind\": \"ConcurrentRequests\",\n      \"Properties\": {\n        \"MaxConcurrentRequests\": 10\n      }\n    }\n  ]\n} ```\n\n// 3 - Visualizing workload groups \n\n.show workload_groups\n\n// 4 - Setting a request classification policy\n\n.alter cluster policy request_classification '{\"IsEnabled\":true}' <|\n    case(\n      current_principal_is_member_of('aadgroup=engineering@periclesrocha.com'), \"Engineering Department WG\",\n      request_properties.current_application == \"Kusto.Explorer\", \"General queries WG\",\n      request_properties.request_description == \"Night shift\" and hourofday(now()) between (18 .. 23), \"After hours WG\",\n      \"default\"\n    )\n\n// 5 - Disabling the request classification policy: \n\n.alter-merge cluster policy request_classification '{\"IsEnabled\":false}'\n\n// 6 - Showing the request classification policy: \n\n.show cluster policy request_classification\n\n// 7 - Enabling the request queueing policy\n\n.alter-merge workload_group default\n```\n{\n  \"RequestQueuingPolicy\": {\n      \"IsEnabled\": true\n  }\n} ```\n\n// 8 - Viewing a table's caching policy \n\n.show table ['drone-telemetry'].['fleet data'] policy caching \n\n// 9 - Defining a caching policy \n\n.alter table ['drone-telemetry'].['fleet data'] policy caching hot = 7d\n\n// 10 - Defining hot-cache windows\n\n.alter table ['drone-telemetry'].['fleet data'] policy caching \n        hot = 30d,\n        hot_window = datetime(2022-11-24) .. datetime(2022-11-28),\n        hot_window = datetime(2022-12-01) .. datetime(2022-12-31)\n\n// 11 - Deleting the cache policy\n\n.delete table ['drone-telemetry'].['fleet data'] policy caching \n\n// 12 - Using the same syntax for databases and clusters\n\n.alter cluster policy caching hot = 7d\n\n.delete database ['drone-telemetry'] policy caching \n",
			"metadata": {
				"language": "kql"
			},
			"currentConnection": {
				"poolName": "droneanalyticsadx",
				"databaseName": "drone-telemetry"
			}
		},
		"type": "KqlQuery"
	}
}