{
	"name": "KQL examples",
	"properties": {
		"folder": {
			"name": "Chapter 6"
		},
		"content": {
			"query": "// 1 - All rows, all columns \n['fleet data']\n\n// 1 - All rows, selecting a few columns\n['fleet data']D\n| project DeviceData, LocalDateTime, DeviceState, CoreTemp, BatteryTemp, Speed\n\n// 2 - Picking only five rows - limit and take are the same\n['fleet data']\n| take 5\n| project DeviceData, LocalDateTime, DeviceState, CoreTemp, BatteryTemp, Speed\n\n// 3 - Take has no order, so how do we pick the first few rows? \n['fleet data']\n| top 5 by LocalDateTime asc\n| project DeviceData, LocalDateTime, DeviceState, CoreTemp, BatteryTemp, Speed\n\n// 4 - Filtering with where\n['fleet data']\n| where LocalDateTime >= datetime(2021-09-27) and LocalDateTime  <= datetime(2021-09-29)\n| project DeviceData, LocalDateTime, DeviceState, CoreTemp, BatteryTemp, Speed\n\n// 5 - Sorting\n['fleet data']\n| where LocalDateTime >= datetime(2021-09-27) and LocalDateTime  <= datetime(2021-09-29)\n| sort by CoreTemp desc\n| project DeviceData, LocalDateTime, DeviceState, CoreTemp, BatteryTemp, Speed\n\n// 6 - Derived columns using extend\n['fleet data']\n| limit 5\n| extend Hour = datetime_part(\"Hour\", LocalDateTime), Minute = datetime_part(\"Minute\", LocalDateTime)\n| project Hour, Minute, LocalDateTime\n\n// 7 - Aggregations \n['fleet data']\n| summarize average_speed = avg(Speed) by DeviceState\n| order by average_speed desc\n\n// 8 - Aggregations \n['fleet data']\n| summarize by DeviceState\n| order by DeviceState asc\n\n// 8 - Which days did we have the most deliveries?\n['fleet data']\n| where DeviceState == 'Delivery'\n| summarize _count = count() by bin(LocalDateTime, 1d)\n| order by _count desc \n\n// 9 - Can I put that in a chart?\n['fleet data']\n| where DeviceState == 'Delivery'\n| where LocalDateTime >= datetime(2021-09-29T00:00:00.000000Z) and LocalDateTime <= datetime(2021-10-15T23:59:59.999999Z)\n| summarize _count = count() by bin(LocalDateTime, 1d)\n| project LocalDateTime, _count\n| order by _count desc \n| render timechart  \n\n// 10 - Average temperature per DeviceState each day\n// It looks like errors happen when temperature spike, or is too low \n['fleet data']\n| where LocalDateTime >= ['fleet data']\n\n| summarize _count = avg(CoreTemp) by bin(LocalDateTime, 1h), DeviceState\n| render timechart  \n\n// 11 - Can I render here? \n['fleet data']\n| summarize temp = avg(CoreTemp) by DeviceState\n| project  DeviceState, temp\n| order by temp desc\n| render columnchart  \n\n// 12 - Percentiles\n['fleet data']\n| summarize percentiles(CoreTemp, 25, 50, 75, 90, 95)\n\n// 15 - Time Series\n['fleet data']\n| make-series AvgTemp_Series=avg(CoreTemp) default=0\non LocalDateTime from datetime(2021-10-01) to datetime(2021-10-04) step 1d by DeviceState\n| project AvgTemp_Series\n\n// For tomorrow: \n['fleet data']\n| make-series AvgTemp=avg(CoreTemp) default=0\non LocalDateTime from datetime(2021-10-01) to datetime(2021-10-04) step 1d by DeviceState\n| extend (MIN, min_idx, MAX, max_idx, AVG, STDEV, VAR) = series_stats(AvgTemp)\n| project DeviceState, MIN, MAX, AVG, STDEV, VAR\n\n// Detect anomalies\n['fleet data']\n| make-series AvgRPM_Series=avg(Engine2RPM) default=0\non LocalDateTime from datetime(2021-09-27) to datetime(2021-10-17) step 1d by DeviceState\n| extend anomaly_score = series_outliers(AvgRPM_Series)\n| mv-expand anomaly_score to typeof(double), AvgRPM = AvgRPM_Series to typeof(double), LocalDateTime to typeof(datetime)\n| where anomaly_score > 1.5 or anomaly_score < -1.5\n| project LocalDateTime, DeviceState, AvgRPM, anomaly_score\n| order by LocalDateTime asc\n\n// FIT\n['fleet data']\n| make-series AvgTemp_Series=avg(CoreTemp) default=0\non LocalDateTime from datetime(2021-09-27T09:00:00.000000Z) to datetime(2021-09-27T23:59:59.999999Z) step 1h\n| extend (RSquare,Slope,Variance,RVariance,Interception,LineFit)=series_fit_line(AvgTemp_Series)\n| render timechart\n\n\n\n\n\n\n",
			"metadata": {
				"language": "kql"
			},
			"currentConnection": {
				"poolName": "droneanalyticsadx",
				"databaseName": "drone-telemetry"
			}
		},
		"type": "KqlQuery"
	}
}