{
	"name": "Regression example",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparkdronetl24",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "9441ff70-afd1-43c9-be18-1177a992f5ca"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/9afda4c7-fb2d-4fd7-a1de-02965164af8c/resourceGroups/rg-AzureSynapse/providers/Microsoft.Synapse/workspaces/drone-analytics/bigDataPools/sparkdronetl24",
				"name": "sparkdronetl24",
				"type": "Spark",
				"endpoint": "https://drone-analytics.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkdronetl24",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "2.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"import azureml.core\n",
					"\n",
					"from azureml.core import Experiment, Workspace, Dataset, Datastore\n",
					"from azureml.train.automl import AutoMLConfig\n",
					"from notebookutils import mssparkutils\n",
					"from azureml.data.dataset_factory import TabularDatasetFactory"
				],
				"execution_count": 46
			},
			{
				"cell_type": "code",
				"source": [
					"linkedService_name = \"AzureMLService1\"\n",
					"experiment_name = \"drone-analytics-fleet_data-20221026113234\"\n",
					"\n",
					"ws = mssparkutils.azureML.getWorkspace(linkedService_name)\n",
					"experiment = Experiment(ws, experiment_name)"
				],
				"execution_count": 47
			},
			{
				"cell_type": "code",
				"source": [
					"df = spark.sql(\"SELECT * FROM drone_telemetry.fleet_data\")\n",
					"\n",
					"# Create new DeviceState column with indexes\n",
					"# Cruise\n",
					"# Delivery\n",
					"# Descent\n",
					"# DeviceError\n",
					"# Off\n",
					"# On\n",
					"# TakeOff\n",
					"\n",
					"from pyspark.sql.functions import *\n",
					"\n",
					"df = df.withColumn('DeviceStateID', when(df.DeviceState == 'Cruise',1) \\\n",
					"      .when(df.DeviceState == 'Delivery',2) \\\n",
					"      .when(df.DeviceState == 'Descent',3) \\\n",
					"      .when(df.DeviceState == 'DeviceError',4) \\\n",
					"      .when(df.DeviceState == 'Off',5) \\\n",
					"      .when(df.DeviceState == 'On',6) \\\n",
					"      .when(df.DeviceState == 'TakeOff',7) \\\n",
					"      .otherwise(-1))\n",
					"#df.show()\n",
					"\n",
					"# Downsampling data for development\n",
					"df = df.sample(True, 0.01, seed=1234)\n",
					"\n",
					"df=df.drop('LocalDate')\n",
					"\n",
					"df = df.select(\n",
					"      'DeviceState', 'DeviceStateID',\n",
					"      'Engine1Status','Engine2Status','Engine3Status','Engine4Status',\n",
					"      'Engine1RPM','Engine2RPM','Engine3RPM','Engine4RPM',\n",
					"      'Engine1Temp','Engine2Temp','Engine3Temp','Engine4Temp',\n",
					"      'CoreTemp','BatteryTemp','CoreStatus','MemoryAvailable','BatteryLevel',\n",
					"      'Altitude','Speed','DistanceFromBase','RFSignal','PayloadWeight','AccumulatedDistance',\n",
					"      date_format('LocalDateTime', 'hh').alias('HourOfDay'),\n",
					"      dayofmonth('LocalDateTime').alias('DayOfMonth'),\n",
					"      dayofweek('LocalDateTime').alias('DayOfWeek')\n",
					"      )\n",
					"\n",
					"training_data, validation_data = df.randomSplit([0.8,0.2], seed=1234)\n",
					"\n",
					"datastore = Datastore.get_default(ws)\n",
					"dataset = TabularDatasetFactory.register_spark_dataframe(training_data, datastore, name = experiment_name + \"-dataset\")"
				],
				"execution_count": 48
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"display(df, summary=True)"
				],
				"execution_count": 49
			},
			{
				"cell_type": "code",
				"source": [
					"import logging\n",
					"\n",
					"automl_settings = {\n",
					"    \"iteration_timeout_minutes\": 10,\n",
					"    \"experiment_timeout_minutes\": 15,\n",
					"    \"enable_early_stopping\": True,\n",
					"    \"featurization\": 'auto',\n",
					"    \"verbosity\": logging.INFO,\n",
					"    \"n_cross_validations\": 2}\n",
					"\n",
					"automl_config = AutoMLConfig(spark_context = sc,\n",
					"                             #task = \"classification\",  # used for classification\n",
					"                             task = 'regression',         # used to predict a value\n",
					"                             training_data = dataset,\n",
					"                             #label_column_name = \"DeviceStateID\",\n",
					"                             label_column_name = 'CoreTemp',\n",
					"                             primary_metric = 'r2_score',\n",
					"                             #experiment_timeout_hours = 1,\n",
					"                             max_concurrent_iterations = 2,\n",
					"                             enable_onnx_compatible_models = False, **automl_settings)"
				],
				"execution_count": 50
			},
			{
				"cell_type": "code",
				"source": [
					"run = experiment.submit(automl_config, show_output=True)"
				],
				"execution_count": 51
			},
			{
				"cell_type": "code",
				"source": [
					"#displayHTML(\"<a href={} target='_blank'>Your experiment in Azure Machine Learning portal: {}</a>\".format(run.get_portal_url(), run.id))"
				],
				"execution_count": 52
			},
			{
				"cell_type": "code",
				"source": [
					"run.wait_for_completion()\n",
					"\n",
					"import mlflow\n",
					"\n",
					"# Get best model from automl run\n",
					"best_run, non_onnx_model = run.get_output() #Change this name to fitted_model\n",
					"\n",
					"artifact_path = experiment_name + \"_artifact\"\n",
					"\n",
					"mlflow.set_tracking_uri(ws.get_mlflow_tracking_uri())\n",
					"mlflow.set_experiment(experiment_name)\n",
					"\n",
					"with mlflow.start_run() as run:\n",
					"    # Save the model to the outputs directory for capture\n",
					"    mlflow.sklearn.log_model(non_onnx_model, artifact_path)\n",
					"\n",
					"    # Register the model to AML model registry\n",
					"    mlflow.register_model(\"runs:/\" + run.info.run_id + \"/\" + artifact_path, \"drone-analytics-fleet_data-20221026113234-Best\")\n",
					"\n",
					"print(best_run)\n",
					"print(non_onnx_model)"
				],
				"execution_count": 53
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"import pandas as pd\r\n",
					"# Test best model accuracy\r\n",
					"validation_data_pd = validation_data.toPandas()\r\n",
					"y_test = validation_data_pd.pop('CoreTemp').to_frame()\r\n",
					"y_predict = non_onnx_model.predict(validation_data_pd)\r\n",
					"\r\n",
					"df_compare = y_test\r\n",
					"df_compare['Predicted'] = y_predict\r\n",
					"display(df_compare)"
				],
				"execution_count": 54
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"len(y_predict)"
				],
				"execution_count": 59
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from sklearn.metrics import mean_squared_error\r\n",
					"from math import sqrt\r\n",
					"\r\n",
					"# Calculate root-mean-square error\r\n",
					"y_actual = y_test.values.flatten().tolist()\r\n",
					"rmse = sqrt(mean_squared_error(y_actual[:615], y_predict))\r\n",
					"\r\n",
					"print(\"Root Mean Square Error:\")\r\n",
					"print(rmse)"
				],
				"execution_count": 60
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"sum_actuals = sum_errors = 0\r\n",
					"\r\n",
					"for actual_val, predict_val in zip(y_actual, y_predict):\r\n",
					"    abs_error = actual_val - predict_val\r\n",
					"    if abs_error < 0:\r\n",
					"        abs_error = abs_error * -1\r\n",
					"\r\n",
					"    sum_errors = sum_errors + abs_error\r\n",
					"    sum_actuals = sum_actuals + actual_val\r\n",
					"\r\n",
					"mean_abs_percent_error = sum_errors / sum_actuals\r\n",
					"print(\"Model MAPE:\")\r\n",
					"print(mean_abs_percent_error)\r\n",
					"print()\r\n",
					"print(\"Model Accuracy:\")\r\n",
					"print(1 - mean_abs_percent_error)"
				],
				"execution_count": 61
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import matplotlib.pyplot as plt\r\n",
					"import numpy as np\r\n",
					"from sklearn.metrics import mean_squared_error, r2_score\r\n",
					"\r\n",
					"# Calculate the R2 score by using the predicted and actual fare prices\r\n",
					"#y_test_actual = y_test['DeviceStateID']\r\n",
					"y_test_actual = y_test['CoreTemp']\r\n",
					"r2 = r2_score(y_test_actual, y_predict)\r\n",
					"\r\n",
					"# Plot the actual versus predicted fare amount values\r\n",
					"plt.style.use('ggplot')\r\n",
					"plt.figure(figsize=(10, 7))\r\n",
					"plt.scatter(y_test_actual,y_predict)\r\n",
					"plt.plot([np.min(y_test_actual), np.max(y_test_actual)], [np.min(y_test_actual), np.max(y_test_actual)], color='lightblue')\r\n",
					"plt.xlabel(\"Actual DeviceState\")\r\n",
					"plt.ylabel(\"Predicted DeviceState\")\r\n",
					"plt.title(\"Actual vs Predicted CoreTemp R^2={}\".format(r2))\r\n",
					"plt.show()"
				],
				"execution_count": 62
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"description = 'My automated ML model'\r\n",
					"model_path='outputs/model.pkl'\r\n",
					"model = best_run.register_model(model_name = 'DeviceTelemetry', model_path = model_path, description = description)\r\n",
					"print(model.name, model.version)"
				],
				"execution_count": 63
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				],
				"execution_count": null
			}
		]
	}
}