{
	"name": "Classifier example",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparkdronetl24",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "a0ac9cf8-0bbb-4db2-b108-96b919df28a9"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/9afda4c7-fb2d-4fd7-a1de-02965164af8c/resourceGroups/rg-AzureSynapse/providers/Microsoft.Synapse/workspaces/drone-analytics/bigDataPools/sparkdronetl24",
				"name": "sparkdronetl24",
				"type": "Spark",
				"endpoint": "https://drone-analytics.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkdronetl24",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "2.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"import azureml.core\n",
					"\n",
					"from azureml.core import Experiment, Workspace, Dataset, Datastore\n",
					"from azureml.train.automl import AutoMLConfig\n",
					"from notebookutils import mssparkutils\n",
					"from azureml.data.dataset_factory import TabularDatasetFactory"
				],
				"execution_count": 76
			},
			{
				"cell_type": "code",
				"source": [
					"linkedService_name = \"AzureMLService1\"\n",
					"experiment_name = \"drone-analytics-fleet_data-20221027091611\"\n",
					"\n",
					"ws = mssparkutils.azureML.getWorkspace(linkedService_name)\n",
					"experiment = Experiment(ws, experiment_name)"
				],
				"execution_count": 77
			},
			{
				"cell_type": "code",
				"source": [
					"df = spark.sql(\"SELECT * FROM drone_telemetry.fleet_data\")\n",
					"\n",
					"# Create new DeviceState column with indexes\n",
					"# Cruise\n",
					"# Delivery\n",
					"# Descent\n",
					"# DeviceError\n",
					"# Off\n",
					"# On\n",
					"# TakeOff\n",
					"\n",
					"from pyspark.sql.functions import *\n",
					"\n",
					"df = df.withColumn('DeviceStateID', when(df.DeviceState == 'Cruise',1) \\\n",
					"      .when(df.DeviceState == 'Delivery',2) \\\n",
					"      .when(df.DeviceState == 'Descent',3) \\\n",
					"      .when(df.DeviceState == 'DeviceError',4) \\\n",
					"      .when(df.DeviceState == 'Off',5) \\\n",
					"      .when(df.DeviceState == 'On',6) \\\n",
					"      .when(df.DeviceState == 'TakeOff',7) \\\n",
					"      .otherwise(-1))\n",
					"\n",
					"df = df.withColumn('CoreStatusID', when(df.DeviceState == 'On',1) \\\n",
					"      .otherwise(0))\n",
					"\n",
					"# Downsampling data for development\n",
					"df = df.sample(True, 0.1, seed=1234)\n",
					"\n",
					"df=df.drop('LocalDate')\n",
					"\n",
					"#df = df.select(\n",
					"#      'DeviceState', 'DeviceStateID',\n",
					"#      'Engine1Status','Engine2Status','Engine3Status','Engine4Status',\n",
					"#      'Engine1RPM','Engine2RPM','Engine3RPM','Engine4RPM',\n",
					"#      'Engine1Temp','Engine2Temp','Engine3Temp','Engine4Temp',\n",
					"#      'CoreTemp','BatteryTemp','CoreStatus','CoreStatusID','MemoryAvailable','BatteryLevel',\n",
					"#      'Altitude','Speed','DistanceFromBase','RFSignal','PayloadWeight','AccumulatedDistance',\n",
					"#      date_format('LocalDateTime', 'hh').alias('HourOfDay'),\n",
					"#      dayofmonth('LocalDateTime').alias('DayOfMonth'),\n",
					"#      dayofweek('LocalDateTime').alias('DayOfWeek')\n",
					"#      )\n",
					"\n",
					"#df = df.select(\n",
					"#      'Engine1Temp','Engine2Temp','Engine3Temp','Engine4Temp',\n",
					"#      'CoreTemp','BatteryTemp','CoreStatus','CoreStatusID',\n",
					"#      'Altitude','Speed','PayloadWeight','AccumulatedDistance'\n",
					"#      )\n",
					"\n",
					"training_data, validation_data = df.randomSplit([0.65,0.35], seed=1234)\n",
					"\n",
					"datastore = Datastore.get_default(ws)\n",
					"dataset = TabularDatasetFactory.register_spark_dataframe(training_data, datastore, name = experiment_name + \"-dataset\")"
				],
				"execution_count": 78
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"display(df)#, summary=True)\r\n",
					"\r\n",
					""
				],
				"execution_count": 87
			},
			{
				"cell_type": "code",
				"source": [
					"import logging\n",
					"\n",
					"automl_settings = {\n",
					"    \"iteration_timeout_minutes\": 10,\n",
					"    \"experiment_timeout_minutes\": 15,\n",
					"    \"enable_early_stopping\": True,\n",
					"    \"featurization\": 'auto',\n",
					"    \"verbosity\": logging.INFO,\n",
					"    \"n_cross_validations\": 2}\n",
					"\n",
					"automl_config = AutoMLConfig(spark_context = sc,\n",
					"                             task = \"classification\",  # used for classification\n",
					"                             training_data = dataset,\n",
					"                             label_column_name = 'DeviceStateID',\n",
					"                             primary_metric = \"accuracy\",\n",
					"                             #experiment_timeout_hours = 1,\n",
					"                             max_concurrent_iterations = 2,\n",
					"                             enable_onnx_compatible_models = False, **automl_settings)"
				],
				"execution_count": 80
			},
			{
				"cell_type": "code",
				"source": [
					"run = experiment.submit(automl_config)"
				],
				"execution_count": 81
			},
			{
				"cell_type": "code",
				"source": [
					"displayHTML(\"<a href={} target='_blank'>Your experiment in Azure Machine Learning portal: {}</a>\".format(run.get_portal_url(), run.id))"
				],
				"execution_count": 82
			},
			{
				"cell_type": "code",
				"source": [
					"run.wait_for_completion()\n",
					"\n",
					"import mlflow\n",
					"\n",
					"# Get best model from automl run\n",
					"best_run, non_onnx_model = run.get_output()\n",
					"\n",
					"artifact_path = experiment_name + \"_artifact\"\n",
					"\n",
					"mlflow.set_tracking_uri(ws.get_mlflow_tracking_uri())\n",
					"mlflow.set_experiment(experiment_name)\n",
					"\n",
					"with mlflow.start_run() as run:\n",
					"    # Save the model to the outputs directory for capture\n",
					"    mlflow.sklearn.log_model(non_onnx_model, artifact_path)\n",
					"\n",
					"    # Register the model to AML model registry\n",
					"    mlflow.register_model(\"runs:/\" + run.info.run_id + \"/\" + artifact_path, \"drone-analytics-fleet_data-20221027091611-Best\")"
				],
				"execution_count": 83
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Get test metrics\r\n",
					"test_run_metrics = best_run.get_metrics()\r\n",
					"for name, value in test_run_metrics.items():\r\n",
					"    print(f\"{name}: {value}\")"
				],
				"execution_count": 84
			}
		]
	}
}