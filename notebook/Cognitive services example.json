{
	"name": "Cognitive services example",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparkdronetl24",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "c8cae066-2c97-45a9-aa1a-1cd0b500445e"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/9afda4c7-fb2d-4fd7-a1de-02965164af8c/resourceGroups/rg-AzureSynapse/providers/Microsoft.Synapse/workspaces/drone-analytics/bigDataPools/sparkdronetl24",
				"name": "sparkdronetl24",
				"type": "Spark",
				"endpoint": "https://drone-analytics.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkdronetl24",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "2.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"from mmlspark.cognitive import *\n",
					"from notebookutils import mssparkutils\n",
					"from pyspark.sql.functions import col\n",
					"from pyspark.sql.types import DoubleType\n",
					"\n",
					"\n",
					"# Load the data into a Spark DataFrame\n",
					"df = spark.sql(\"SELECT * FROM drone_telemetry.fleet_data\").withColumn(\"CoreTemp\", col(\"CoreTemp\").cast(DoubleType()))\n",
					"\n",
					"anomalyDetector = (SimpleDetectAnomalies()\n",
					"    .setLinkedService(\"AnomalyDetectionService\")\n",
					"    .setOutputCol(\"output\")\n",
					"    .setErrorCol(\"error\")\n",
					"    .setGranularity(\"daily\")\n",
					"    .setTimestampCol(\"LocalDate\")\n",
					"    .setValueCol(\"CoreTemp\")\n",
					"    .setGroupbyCol(\"CoreStatus\"))\n",
					"\n",
					"results = anomalyDetector.transform(df)\n",
					"\n",
					"# Show the results\n",
					"display(results.select(\"LocalDate\", \"CoreTemp\", \"CoreStatus\", \"output.*\", \"error\").limit(10))"
				],
				"execution_count": 3
			}
		]
	}
}