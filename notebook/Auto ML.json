{
	"name": "Auto ML",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparkdronetl24",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "84989c34-23ad-4346-b9ee-7c4dde87ed4b"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/9afda4c7-fb2d-4fd7-a1de-02965164af8c/resourceGroups/rg-AzureSynapse/providers/Microsoft.Synapse/workspaces/drone-analytics/bigDataPools/sparkdronetl24",
				"name": "sparkdronetl24",
				"type": "Spark",
				"endpoint": "https://drone-analytics.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkdronetl24",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "2.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"import azureml.core\n",
					"\n",
					"from azureml.core import Experiment, Workspace, Dataset, Datastore\n",
					"from azureml.train.automl import AutoMLConfig\n",
					"from notebookutils import mssparkutils\n",
					"from azureml.data.dataset_factory import TabularDatasetFactory"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"source": [
					"linkedService_name = \"AzureMLService1\"\n",
					"experiment_name = \"drone-analytics-fleet_data-20221025052736\"\n",
					"\n",
					"ws = mssparkutils.azureML.getWorkspace(linkedService_name)\n",
					"experiment = Experiment(ws, experiment_name)"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"source": [
					"df  = spark.read \\\n",
					"    .format(\"com.microsoft.kusto.spark.synapse.datasource\") \\\n",
					"    .option(\"spark.synapse.linkedService\", \"kustoPool\") \\\n",
					"    .option(\"kustoCluster\", \"https://droneanalyticsadx.drone-analytics.kusto.azuresynapse.net\") \\\n",
					"    .option(\"kustoDatabase\", \"drone-telemetry\") \\\n",
					"    .option(\"kustoQuery\", \"['fleet data']\") \\\n",
					"    .load()\n",
					"\n",
					"# display(df)\n",
					"df.describe().show()\n",
					"\n",
					"#df = spark.sql(\"SELECT * FROM drone_telemetry.fleet_data\")\n",
					"\n",
					"datastore = Datastore.get_default(ws)\n",
					"dataset = TabularDatasetFactory.register_spark_dataframe(df, datastore, name = experiment_name + \"-dataset\")"
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"source": [
					"automl_config = AutoMLConfig(spark_context = sc,\n",
					"                             task = \"classification\",\n",
					"                             training_data = dataset,\n",
					"                             label_column_name = \"CoreStatus\",\n",
					"                             primary_metric = \"accuracy\",\n",
					"                             experiment_timeout_minutes = 30,\n",
					"                             max_concurrent_iterations = 2,\n",
					"                             iteration_timeout_minutes = 10,\n",
					"                             enable_onnx_compatible_models = True)"
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"source": [
					"run = experiment.submit(automl_config)"
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"source": [
					"displayHTML(\"<a href={} target='_blank'>Your experiment in Azure Machine Learning portal: {}</a>\".format(run.get_portal_url(), run.id))"
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"source": [
					"run.wait_for_completion()\n",
					"\n",
					"import onnxruntime\n",
					"import mlflow\n",
					"import mlflow.onnx\n",
					"\n",
					"from mlflow.models.signature import ModelSignature\n",
					"from mlflow.types import DataType\n",
					"from mlflow.types.schema import ColSpec, Schema\n",
					"\n",
					"# Get best model from automl run\n",
					"best_run, onnx_model = run.get_output(return_onnx_model=True)\n",
					"\n",
					"# Define utility functions to infer the schema of ONNX model\n",
					"def _infer_schema(data):\n",
					"    res = []\n",
					"    for _, col in enumerate(data):\n",
					"        t = col.type.replace(\"tensor(\", \"\").replace(\")\", \"\")\n",
					"        if t in [\"bool\"]:\n",
					"            dt = DataType.boolean\n",
					"        elif t in [\"int8\", \"uint8\", \"int16\", \"uint16\", \"int32\"]:\n",
					"            dt = DateType.integer\n",
					"        elif t in [\"uint32\", \"int64\"]:\n",
					"            dt = DataType.long\n",
					"        elif t in [\"float16\", \"bfloat16\", \"float\"]:\n",
					"            dt = DataType.float\n",
					"        elif t in [\"double\"]:\n",
					"            dt = DataType.double\n",
					"        elif t in [\"string\"]:\n",
					"            dt = DataType.string\n",
					"        else:\n",
					"            raise Exception(\"Unsupported type: \" + t)\n",
					"        res.append(ColSpec(type=dt, name=col.name))\n",
					"    return Schema(res)\n",
					"\n",
					"def _infer_signature(onnx_model):\n",
					"    onnx_model_bytes = onnx_model.SerializeToString()\n",
					"    onnx_runtime = onnxruntime.InferenceSession(onnx_model_bytes)\n",
					"    inputs = _infer_schema(onnx_runtime.get_inputs())\n",
					"    outputs = _infer_schema(onnx_runtime.get_outputs())\n",
					"    return ModelSignature(inputs, outputs)\n",
					"\n",
					"# Infer signature of ONNX model\n",
					"signature = _infer_signature(onnx_model)\n",
					"\n",
					"artifact_path = experiment_name + \"_artifact\"\n",
					"mlflow.set_tracking_uri(ws.get_mlflow_tracking_uri())\n",
					"mlflow.set_experiment(experiment_name)\n",
					"\n",
					"with mlflow.start_run() as run:\n",
					"    # Save the model to the outputs directory for capture\n",
					"    mlflow.onnx.log_model(onnx_model, artifact_path, signature=signature)\n",
					"\n",
					"    # Register the model to AML model registry\n",
					"    mlflow.register_model(\"runs:/\" + run.info.run_id + \"/\" + artifact_path, \"drone-analytics-fleet_data-20221025052736-Best\")"
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Test best model accuracy\r\n",
					"validation_data_pd = validation_data.toPandas()\r\n",
					"y_test = validation_data_pd.pop(\"CoreTemp\").to_frame()\r\n",
					"y_predict = onnx_model.predict(validation_data_pd)"
				],
				"execution_count": 8
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from sklearn.metrics import mean_squared_error\r\n",
					"from math import sqrt\r\n",
					"\r\n",
					"# Calculate root-mean-square error\r\n",
					"y_actual = y_test.values.flatten().tolist()\r\n",
					"rmse = sqrt(mean_squared_error(y_actual, y_predict))\r\n",
					"\r\n",
					"print(\"Root Mean Square Error:\")\r\n",
					"print(rmse)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import matplotlib.pyplot as plt\r\n",
					"import numpy as np\r\n",
					"from sklearn.metrics import mean_squared_error, r2_score\r\n",
					"\r\n",
					"# Calculate the R2 score by using the predicted and actual fare prices\r\n",
					"y_test_actual = y_test[\"CoreTemp\"]\r\n",
					"r2 = r2_score(y_test_actual, y_predict)\r\n",
					"\r\n",
					"# Plot the actual versus predicted fare amount values\r\n",
					"plt.style.use('ggplot')\r\n",
					"plt.figure(figsize=(10, 7))\r\n",
					"plt.scatter(y_test_actual,y_predict)\r\n",
					"plt.plot([np.min(y_test_actual), np.max(y_test_actual)], [np.min(y_test_actual), np.max(y_test_actual)], color='lightblue')\r\n",
					"plt.xlabel(\"Actual CoreTemp\")\r\n",
					"plt.ylabel(\"Predicted CoreTemp\")\r\n",
					"plt.title(\"Actual vs Predicted CoreTemp R^2={}\".format(r2))\r\n",
					"plt.show()\r\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"description = 'My automated ML model'\r\n",
					"model_path='outputs/model.pkl'\r\n",
					"model = best_run.register_model(model_name = 'DeviceTelemetry', model_path = model_path, description = description)\r\n",
					"print(model.name, model.version)"
				],
				"execution_count": null
			}
		]
	}
}